// Firebase Security Rules for Payment Data
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Base rules - deny access by default
    match /{document=**} {
      allow read, write: if false;
    }

    // User profiles - users can read/write their own data only
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Admins can read all user data
      allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Payment history - strict rules
    match /paymentHistory/{paymentId} {
      // Users can read their own payments only
      allow read: if request.auth != null && 
                   resource.data.customerId == request.auth.uid;
      
      // Only allow secure server operations to write payment data
      // This prevents client-side manipulation of payment records
      allow write: if request.auth != null && 
                    (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
                     request.resource.data.source == 'server' && 
                     request.resource.data.serverTimestamp == request.time);
      
      // Additional validation for payment amounts to prevent fraud
      allow create: if request.auth != null && 
                      request.resource.data.amount > 0 &&
                      request.resource.data.currency is string &&
                      request.resource.data.paymentIntentId is string &&
                      request.resource.data.status in ['succeeded', 'pending', 'failed'];
    }

    // Subscription data - secured for both customers and admins
    match /subscriptions/{subscriptionId} {
      // Allow users to read their own subscriptions
      allow read: if request.auth != null && 
                   resource.data.customerId == request.auth.uid;

      // Allow admins to read and write all subscriptions
      allow read, write: if request.auth != null && 
                           get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
      
      // Only allow secure server operations or admins to write subscription data
      allow create, update: if request.auth != null &&
                              (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
                              (request.resource.data.customerId == request.auth.uid &&
                               request.resource.data.status in ['active', 'pending']));
                               
      // Prevent deletion of subscriptions by customers
      allow delete: if request.auth != null && 
                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Subscription payments links - join table
    match /subscriptionPayments/{linkId} {
      // Allow users to read their own subscription payments
      allow read: if request.auth != null && 
                   get(/databases/$(database)/documents/subscriptions/$(resource.data.subscriptionId)).data.customerId == request.auth.uid;
      
      // Only allow server operations or admins to create payment links
      allow create: if request.auth != null && 
                     (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' ||
                      request.resource.data.source == 'server');
                      
      // No updates or deletes allowed to preserve payment history integrity
      allow update, delete: if false;
    }
    
    // Menu collection - everyone can read, only admins can write
    match /menu/{itemId} {
      allow read: if true;
      allow write: if request.auth != null && 
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Delivery collection - secured by role
    match /delivery/{deliveryId} {
      // Customers can see their own deliveries
      allow read: if request.auth != null && 
                   resource.data.customerId == request.auth.uid;
                   
      // Delivery partners can see assigned deliveries
      allow read: if request.auth != null && 
                   resource.data.partnerId == request.auth.uid;
                   
      // Only admins can create or modify deliveries
      allow write: if request.auth != null && 
                    get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
                    
      // Delivery partners can update status only
      allow update: if request.auth != null && 
                     resource.data.partnerId == request.auth.uid &&
                     request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt']);
    }
  }
}