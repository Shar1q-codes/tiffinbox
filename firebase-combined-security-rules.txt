// Firebase Combined Security Rules for TiffinBox System
// Covers both Rider System and Payment Module

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Base rule - deny access by default for security
    match /{document=**} {
      allow read, write: if false;
    }

    // --------------------
    // MENU & CONTENT RULES
    // --------------------
    
    // Allow read access to menu items for all users
    match /menu/{document} {
      allow read: if true;
      allow write: if request.auth != null && isAdmin();
    }
    
    // Allow read access to weekly menu for all users
    match /weeklyMenu/{document} {
      allow read: if true;
      allow write: if request.auth != null && isAdmin();
    }
    
    // ---------------
    // CUSTOMER RULES
    // ---------------
    
    // Customer data - allow creation for all users, read/write for authenticated users
    match /customers/{document} {
      allow create: if true; // Allow unauthenticated users to create subscription records
      allow read, write: if request.auth != null && (
        // Owner can read/write their own data
        request.auth.uid == document ||
        // Admins can read/write all customer data
        isAdmin()
      );
    }
    
    // ---------------
    // USER PROFILES
    // ---------------
    
    // User profiles - users can read/write their own data only
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Admins can read all user data
      allow read: if request.auth != null && isAdmin();
    }
    
    // ---------------
    // PAYMENT RULES
    // ---------------
    
    // Payment history - strict rules
    match /paymentHistory/{paymentId} {
      // Users can read their own payments only
      allow read: if request.auth != null && 
                   resource.data.customerId == request.auth.uid;
      
      // Only allow secure server operations or admins to write payment data
      allow write: if request.auth != null && 
                    (isAdmin() ||
                     request.resource.data.source == 'server' && 
                     request.resource.data.serverTimestamp == request.time);
      
      // Additional validation for payment amounts to prevent fraud
      allow create: if request.auth != null && 
                      request.resource.data.amount > 0 &&
                      request.resource.data.currency is string &&
                      request.resource.data.paymentIntentId is string &&
                      request.resource.data.status in ['succeeded', 'pending', 'failed'];
    }
    
    // Subscription data - secured for both customers and admins
    match /subscriptions/{subscriptionId} {
      // Allow users to read their own subscriptions
      allow read: if request.auth != null && 
                   resource.data.customerId == request.auth.uid;

      // Allow admins to read and write all subscriptions
      allow read, write: if request.auth != null && isAdmin();
      
      // Allow customers to create/update their own subscriptions with limited status options
      allow create, update: if request.auth != null &&
                              (isAdmin() ||
                              (request.resource.data.customerId == request.auth.uid &&
                               request.resource.data.status in ['active', 'pending']));
                               
      // Prevent deletion of subscriptions by customers
      allow delete: if request.auth != null && isAdmin();
    }
    
    // Subscription payments links - join table
    match /subscriptionPayments/{linkId} {
      // Allow users to read their own subscription payments
      allow read: if request.auth != null && 
                   get(/databases/$(database)/documents/subscriptions/$(resource.data.subscriptionId)).data.customerId == request.auth.uid;
      
      // Only allow server operations or admins to create payment links
      allow create: if request.auth != null && 
                     (isAdmin() ||
                      request.resource.data.source == 'server');
                      
      // No updates or deletes allowed to preserve payment history integrity
      allow update, delete: if false;
    }
    
    // ---------------
    // DELIVERY RULES
    // ---------------
    
    // Delivery partners - only authenticated users can read, only admins can write
    match /deliveryPartners/{document} {
      // Allow anyone to create a new rider account (for self-signup)
      allow create: if request.auth != null;
      
      // Allow reading by any authenticated user
      allow read: if request.auth != null;
      
      // Allow admins to update any rider
      allow update: if request.auth != null && (
        isAdmin() || 
        // Allow riders to update their own lastActive timestamp
        (request.auth.token.email == resource.data.email &&
         request.writeFields.hasOnly(['lastActive']))
      );
      
      // Only admins can delete riders
      allow delete: if request.auth != null && isAdmin();
    }
    
    // Delivery status - allow creation for all users, allow public read access by tracking token
    match /deliveryStatus/{document} {
      // Allow read access for:
      // 1. Authenticated users OR
      // 2. Public access if the document ID matches the tracking token AND it hasn't expired
      allow read: if request.auth != null || 
                   (document == resource.data.trackingToken && 
                    resource.data.expiresAt > request.time);
      
      allow create: if true; // Allow unauthenticated users to create delivery status records
      
      // Allow updates from admins or assigned riders
      allow update: if request.auth != null && (
        isAdmin() || 
        isAssignedRider(resource.data.assignedPartner)
      );
      
      // Allow delete for admins
      allow delete: if request.auth != null && isAdmin();
    }
    
    // Detailed delivery collection - secured by role
    match /delivery/{deliveryId} {
      // Customers can see their own deliveries
      allow read: if request.auth != null && 
                   resource.data.customerId == request.auth.uid;
                   
      // Delivery partners can see assigned deliveries
      allow read: if request.auth != null && 
                   resource.data.partnerId == request.auth.uid;
                   
      // Only admins can create or modify deliveries
      allow write: if request.auth != null && isAdmin();
                    
      // Delivery partners can update status only
      allow update: if request.auth != null && 
                     resource.data.partnerId == request.auth.uid &&
                     request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt']);
    }
    
    // ---------------
    // HELPER FUNCTIONS
    // ---------------
    
    // Check if the user is an admin
    function isAdmin() {
      // First check if user has admin role in users collection
      return request.auth != null && (
        // Check for admin role in users collection
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin') ||
        // Fallback to admin email list
        request.auth.token.email in [
          'admin@tiffinbox.com',
          'manager@tiffinbox.com'
        ]
      );
    }
    
    // Check if the user is the assigned rider
    function isAssignedRider(assignedPartnerId) {
      // Check if the current user is the assigned rider for this delivery
      return exists(/databases/$(database)/documents/deliveryPartners/$(assignedPartnerId)) &&
             get(/databases/$(database)/documents/deliveryPartners/$(assignedPartnerId)).data.email == request.auth.token.email;
    }
  }
}

// Firebase Storage Rules
service firebase.storage {
  match /b/{bucket}/o {
    match /{allPaths=**} {
      allow read: if true;
      allow write: if request.auth != null && (
        // Allow admin users to write to any storage location
        isStorageAdmin() ||
        // Allow users to write to their own folder
        request.auth.uid == userId
      );
    }
    
    // User-specific storage area for profile photos and documents
    match /users/{userId}/{allPaths=**} {
      allow read: if request.auth != null && (
        request.auth.uid == userId ||
        isStorageAdmin()
      );
      allow write: if request.auth != null && (
        request.auth.uid == userId ||
        isStorageAdmin()
      );
    }
    
    // Helper function for storage admin access
    function isStorageAdmin() {
      return request.auth != null && request.auth.token.email in [
        'admin@tiffinbox.com',
        'manager@tiffinbox.com'
      ];
    }
  }
}

/*
AUTHENTICATION & SECURITY SETUP INSTRUCTIONS:

1. AUTHENTICATION:
   - Enable Email/Password authentication in Firebase Console
   - Add authorized domains for your application
   - Configure email templates for password reset (optional)
   - Set up OAuth providers if needed (Google, Facebook, etc.)

2. USER ACCESS CONTROL:
   - Admins: Full access to all collections and operations
   - Riders: 
     - Can self-register through the signup page
     - Need admin approval to become active
     - Can only access their assigned orders
     - Can only update status of their assigned deliveries
   - Customers: 
     - Can only access their own data
     - Can create subscriptions but with limited status options
     - Can view their payment history

3. PAYMENT SECURITY:
   - Payment history is strictly controlled
   - All payment amounts must be positive and have valid formats
   - Only server-side operations or admins can create payment records
   - Payment status is limited to predefined values only
   - Subscription-payment links are immutable once created

4. SECURITY CONSIDERATIONS:
   - All sensitive operations require authentication
   - Rules defend against client-side manipulation
   - Payment data has strict validation
   - Self-registered riders cannot access the system until approved
   - Unauthenticated users have minimal permissions
   - All database writes should be logged and auditable
*/